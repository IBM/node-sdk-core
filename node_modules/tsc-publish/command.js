"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const child_process_1 = require("child_process");
const ansi_colors_1 = __importDefault(require("ansi-colors"));
const path_1 = require("path");
class ExecCommand {
    constructor(cwd, command, args = []) {
        this.cwd = cwd;
        this.command = command;
        this.args = args;
    }
    describe() {
        console.log('> ExecCommand');
        console.log(`>   ${ansi_colors_1.default.cyan(`${this.command} ${this.args.join(' ')}`)}`);
    }
    execute() {
        return new Promise((resolve, reject) => {
            child_process_1.spawn(this.command, this.args, {
                stdio: 'inherit',
                cwd: this.cwd
            }).on('error', reject).on('exit', resolve);
        });
    }
}
exports.ExecCommand = ExecCommand;
class NpmCommand extends ExecCommand {
    constructor(cwd, command) {
        if (typeof command === 'string') {
            command = [command];
        }
        super(cwd, 'npm', command);
    }
}
exports.NpmCommand = NpmCommand;
class NpmRunCommand extends NpmCommand {
    constructor(cwd, command, args = []) {
        super(cwd, ['run', command].concat(args));
    }
}
exports.NpmRunCommand = NpmRunCommand;
class CopyCommand {
    constructor(src, dest, file) {
        this.file = file;
        this.src = src;
        this.dest = dest;
        if (!fs_1.default.existsSync(path_1.join(this.src, this.file)) || !fs_1.default.lstatSync(path_1.join(this.src, this.file)).isFile()) {
            throw new Error('Can only copy files');
        }
        /*if (!fs.existsSync(this.dest)) {
          throw new Error(`Dest does not exist: ${this.dest}`);
        }*/
    }
    describe() {
        if (!fs_1.default.existsSync(path_1.join(this.dest, path_1.dirname(this.file)))) {
            fs_1.default.mkdirSync(path_1.join(this.dest, path_1.dirname(this.file)), { recursive: true });
        }
        console.log('> CopyCommand');
        console.log(`   ${ansi_colors_1.default.cyan(path_1.join(this.src, this.file))}`);
        console.log(`   -> ${ansi_colors_1.default.green(path_1.join(this.dest, this.file))}`);
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            fs_1.default.copyFileSync(path_1.join(this.src, this.file), path_1.join(this.dest, this.file));
            return 0;
        });
    }
}
exports.CopyCommand = CopyCommand;
//# sourceMappingURL=command.js.map