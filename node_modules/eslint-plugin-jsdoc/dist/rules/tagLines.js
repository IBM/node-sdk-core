"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _iterateJsdoc = _interopRequireDefault(require("../iterateJsdoc"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _iterateJsdoc.default)(({
  context,
  jsdoc,
  utils
}) => {
  const [alwaysNever = 'never', {
    count = 1,
    noEndLines = false
  } = {}] = context.options;

  if (alwaysNever === 'never') {
    jsdoc.tags.some((tg, tagIdx) => {
      return tg.source.some(({
        tokens: {
          tag,
          name,
          type,
          description,
          end
        }
      }, idx) => {
        const fixer = () => {
          utils.removeTagItem(tagIdx, idx);
        };

        if (!tag && !name && !type && !description && !end) {
          utils.reportJSDoc('Expected no lines between tags', {
            line: tg.source[0].number + 1
          }, fixer, true);
          return true;
        }

        return false;
      });
    });
    return;
  }

  (noEndLines ? jsdoc.tags.slice(0, -1) : jsdoc.tags).some((tg, tagIdx) => {
    const lines = [];
    tg.source.forEach(({
      number,
      tokens: {
        tag,
        name,
        type,
        description,
        end
      }
    }, idx) => {
      if (!tag && !name && !type && !description && !end) {
        lines.push({
          idx,
          number
        });
      }
    });

    if (lines.length < count) {
      var _lines2;

      const fixer = () => {
        var _lines;

        utils.addLines(tagIdx, ((_lines = lines[lines.length - 1]) === null || _lines === void 0 ? void 0 : _lines.idx) || 1, count - lines.length);
      };

      utils.reportJSDoc(`Expected ${count} line${count === 1 ? '' : 's'} between tags but found ${lines.length}`, {
        line: ((_lines2 = lines[lines.length - 1]) === null || _lines2 === void 0 ? void 0 : _lines2.number) || tg.source[0].number
      }, fixer, true);
      return true;
    }

    return false;
  });
}, {
  iterateAllJsdocs: true,
  meta: {
    docs: {
      description: 'Enforces lines (or no lines) between tags.',
      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-tag-lines'
    },
    fixable: 'code',
    schema: [{
      enum: ['always', 'never'],
      type: 'string'
    }, {
      additionalProperies: false,
      properties: {
        count: {
          type: 'integer'
        },
        noEndLines: {
          type: 'boolean'
        }
      },
      type: 'object'
    }],
    type: 'suggestion'
  }
});

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=tagLines.js.map