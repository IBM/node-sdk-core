{"version":3,"sources":["../../src/rules/multilineBlocks.js"],"names":["context","indent","jsdoc","utils","allowMultipleTags","noFinalLineText","noZeroLineText","noSingleLineBlocks","singleLineTags","noMultilineBlocks","minimumLengthForMultiline","Number","POSITIVE_INFINITY","multilineTags","options","source","tokens","postDelimiter","description","tag","name","type","sourceLength","length","emptyTokens","forEach","prop","isInvalidSingleLine","tagName","includes","slice","fixer","postName","postTag","postType","addLine","delimiter","trimEnd","start","end","reportJSDoc","lineChecks","line","finalLine","finalLineTokens","trim","tags","hasATag","filterTags","tg","number","reduce","obj","desc","typ","nme","nameOrDescription","seedTokens","iterateAllJsdocs","meta","docs","url","fixable","schema","additionalProperies","properties","anyOf","enum","items"],"mappings":"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","sourcesContent":["import iterateJsdoc from '../iterateJsdoc';\n\nexport default iterateJsdoc(({\n  context,\n  indent,\n  jsdoc,\n  utils,\n}) => {\n  const {\n    allowMultipleTags = true,\n    noFinalLineText = true,\n    noZeroLineText = true,\n    noSingleLineBlocks = false,\n    singleLineTags = ['lends', 'type'],\n    noMultilineBlocks = false,\n    minimumLengthForMultiline = Number.POSITIVE_INFINITY,\n    multilineTags = ['*'],\n  } = context.options[0] || {};\n\n  const {source: [{tokens}]} = jsdoc;\n  const {postDelimiter, description, tag, name, type} = tokens;\n  const sourceLength = jsdoc.source.length;\n\n  const emptyTokens = () => {\n    [\n      'start',\n      'postDelimiter',\n      'tag',\n      'type',\n      'postType',\n      'postTag',\n      'name',\n      'postName',\n      'description',\n      'end',\n    ].forEach((prop) => {\n      tokens[prop] = '';\n    });\n  };\n\n  const isInvalidSingleLine = (tagName) => {\n    return noSingleLineBlocks &&\n      (!tagName ||\n      !singleLineTags.includes(tagName) && !singleLineTags.includes('*'));\n  };\n\n  if (sourceLength === 1) {\n    if (!isInvalidSingleLine(tag.slice(1))) {\n      return;\n    }\n\n    const fixer = () => {\n      let {tokens: {\n        postName, postTag, postType,\n      }} = jsdoc.source[0];\n\n      // Strip trailing leftovers from single line ending\n      if (!description) {\n        if (postName) {\n          postName = '';\n        } else if (postType) {\n          postType = '';\n        // eslint-disable-next-line max-len, no-inline-comments\n        } else /* istanbul ignore else -- `comment-parser` prevents empty blocks currently per https://github.com/syavorsky/comment-parser/issues/128 */ if (postTag) {\n          postTag = '';\n        }\n      }\n\n      emptyTokens();\n\n      utils.addLine(1, {\n        delimiter: '*',\n\n        // If a description were present, it may have whitespace attached\n        //   due to being at the end of the single line\n        description: description.trimEnd(),\n        name,\n        postDelimiter,\n        postName,\n        postTag,\n        postType,\n        start: indent + ' ',\n        tag,\n        type,\n      });\n      utils.addLine(2, {\n        end: '*/',\n        start: indent + ' ',\n      });\n    };\n\n    utils.reportJSDoc(\n      'Single line blocks are not permitted by your configuration.',\n      null, fixer, true,\n    );\n\n    return;\n  }\n\n  const lineChecks = () => {\n    if (\n      noZeroLineText &&\n      (tag || description)\n    ) {\n      const fixer = () => {\n        const line = {...tokens};\n        emptyTokens();\n        const {tokens: {delimiter, start}} = jsdoc.source[1];\n        utils.addLine(1, {...line, delimiter, start});\n      };\n      utils.reportJSDoc(\n        'Should have no text on the \"0th\" line (after the `/**`).',\n        null, fixer,\n      );\n\n      return;\n    }\n\n    const finalLine = jsdoc.source[jsdoc.source.length - 1];\n    const finalLineTokens = finalLine.tokens;\n    if (\n      noFinalLineText &&\n      finalLineTokens.description.trim()\n    ) {\n      const fixer = () => {\n        const line = {...finalLineTokens};\n        line.description = line.description.trimEnd();\n\n        const {delimiter} = line;\n\n        [\n          'delimiter',\n          'postDelimiter',\n          'tag',\n          'type',\n          'postType',\n          'postTag',\n          'name',\n          'postName',\n          'description',\n        ].forEach((prop) => {\n          finalLineTokens[prop] = '';\n        });\n\n        utils.addLine(jsdoc.source.length - 1, {...line, delimiter, end: ''});\n      };\n      utils.reportJSDoc(\n        'Should have no text on the final line (before the `*/`).',\n        null, fixer,\n      );\n    }\n  };\n\n  if (noMultilineBlocks) {\n    if (\n      jsdoc.tags.length &&\n      (multilineTags.includes('*') || utils.hasATag(multilineTags))\n    ) {\n      lineChecks();\n\n      return;\n    }\n\n    if (jsdoc.description.length >= minimumLengthForMultiline) {\n      lineChecks();\n\n      return;\n    }\n\n    if (\n      noSingleLineBlocks &&\n      (!jsdoc.tags.length ||\n      !utils.filterTags(({tag: tg}) => {\n        return !isInvalidSingleLine(tg);\n      }).length)\n    ) {\n      utils.reportJSDoc(\n        'Multiline jsdoc blocks are prohibited by ' +\n          'your configuration but fixing would result in a single ' +\n          'line block which you have prohibited with `noSingleLineBlocks`.',\n      );\n\n      return;\n    }\n\n    if (jsdoc.tags.length > 1) {\n      if (!allowMultipleTags) {\n        utils.reportJSDoc(\n          'Multiline jsdoc blocks are prohibited by ' +\n            'your configuration but the block has multiple tags.',\n        );\n\n        return;\n      }\n    } else if (jsdoc.tags.length === 1 && jsdoc.description.trim()) {\n      if (!allowMultipleTags) {\n        utils.reportJSDoc(\n          'Multiline jsdoc blocks are prohibited by ' +\n            'your configuration but the block has a description with a tag.',\n        );\n\n        return;\n      }\n    } else {\n      const fixer = () => {\n        jsdoc.source = [{\n          number: 1,\n          source: '',\n          tokens: jsdoc.source.reduce((obj, {\n            tokens: {\n              description: desc, tag: tg, type: typ, name: nme,\n              postType, postName, postTag,\n            },\n          }) => {\n            if (typ) {\n              obj.type = typ;\n            }\n            if (tg && typ && nme) {\n              obj.postType = postType;\n            }\n            if (nme) {\n              obj.name += nme;\n            }\n            if (nme && desc) {\n              obj.postName = postName;\n            }\n            obj.description += desc;\n\n            const nameOrDescription = obj.description || obj.name;\n            if (\n              nameOrDescription && nameOrDescription.slice(-1) !== ' '\n            ) {\n              obj.description += ' ';\n            }\n\n            // Already filtered for multiple tags\n            obj.tag += tg;\n            if (tg) {\n              obj.postTag = postTag || ' ';\n            }\n\n            return obj;\n          }, utils.seedTokens({\n            delimiter: '/**',\n            description: '',\n            end: '*/',\n            postDelimiter: ' ',\n            tag: '',\n          })),\n        }];\n      };\n      utils.reportJSDoc(\n        'Multiline jsdoc blocks are prohibited by ' +\n          'your configuration.',\n        null, fixer,\n      );\n\n      return;\n    }\n  }\n\n  lineChecks();\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Controls how and whether jsdoc blocks can be expressed as single or multiple line blocks.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-multiline-blocks',\n    },\n    fixable: 'code',\n    schema: [\n      {\n        additionalProperies: false,\n        properties: {\n          allowMultipleTags: {\n            type: 'boolean',\n          },\n          minimumLengthForMultiline: {\n            type: 'integer',\n          },\n          multilineTags: {\n            anyOf: [\n              {\n                enum: ['*'],\n                type: 'string',\n              }, {\n                items: {\n                  type: 'string',\n                },\n                type: 'array',\n              },\n            ],\n          },\n          noFinalLineText: {\n            type: 'boolean',\n          },\n          noMultilineBlocks: {\n            type: 'boolean',\n          },\n          noSingleLineBlocks: {\n            type: 'boolean',\n          },\n          noZeroLineText: {\n            type: 'boolean',\n          },\n          singleLineTags: {\n            items: {\n              type: 'string',\n            },\n            type: 'array',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"file":"multilineBlocks.js"}