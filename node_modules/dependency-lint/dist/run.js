(function() {
  var AutoCorrector, ConfigurationLoader, JsonFormatter, Linter, Promise, SummaryFormatter, _, coroutine, fsExtra, getFormatter, hasError, path, readJson, run, writeJson;

  _ = require('lodash');

  AutoCorrector = require('./auto_corrector');

  ConfigurationLoader = require('./configuration_loader');

  fsExtra = require('fs-extra');

  JsonFormatter = require('./formatters/json_formatter');

  Linter = require('./linter');

  path = require('path');

  Promise = require('bluebird');

  SummaryFormatter = require('./formatters/summary_formatter');

  coroutine = Promise.coroutine;

  readJson = Promise.promisify(fsExtra.readJson);

  writeJson = Promise.promisify(fsExtra.writeJson);

  getFormatter = function(format) {
    var options;
    options = {
      stream: process.stdout
    };
    switch (format) {
      case 'minimal':
        return new SummaryFormatter(_.assign({
          minimal: true
        }, options));
      case 'summary':
        return new SummaryFormatter(options);
      case 'json':
        return new JsonFormatter(options);
    }
  };

  hasError = function(results) {
    return _.some(results, function(modules) {
      return _.some(modules, function(arg) {
        var error, errorFixed, errorIgnored;
        error = arg.error, errorFixed = arg.errorFixed, errorIgnored = arg.errorIgnored;
        return error && !(errorFixed || errorIgnored);
      });
    });
  };

  run = coroutine(function*(arg) {
    var autoCorrect, config, dir, fixes, format, packageJson, packageJsonPath, ref, results, updatedPackageJson;
    autoCorrect = arg.autoCorrect, format = arg.format;
    dir = process.cwd();
    packageJsonPath = path.join(dir, 'package.json');
    packageJson = (yield readJson(packageJsonPath));
    config = (yield new ConfigurationLoader().load(dir));
    results = (yield new Linter(config).lint({
      dir: dir,
      packageJson: packageJson
    }));
    if (autoCorrect) {
      ref = new AutoCorrector().correct({
        packageJson: packageJson,
        results: results
      }), fixes = ref.fixes, updatedPackageJson = ref.updatedPackageJson;
      yield writeJson(packageJsonPath, updatedPackageJson, {
        spaces: 2
      });
    }
    getFormatter(format).print({
      fixes: fixes,
      results: results
    });
    if (hasError(results)) {
      return process.exit(1);
    }
  });

  module.exports = run;

}).call(this);
