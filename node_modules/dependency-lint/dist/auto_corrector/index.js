(function() {
  var AutoCorrector, ERRORS, Promise, _, fsExtra, path, sortedObject, writeJson;

  _ = require('lodash');

  ERRORS = require('../errors');

  fsExtra = require('fs-extra');

  path = require('path');

  Promise = require('bluebird');

  sortedObject = require('sorted-object');

  writeJson = Promise.promisify(fsExtra.writeJson);

  AutoCorrector = (function() {
    function AutoCorrector() {}

    AutoCorrector.prototype.correct = function(arg) {
      var changes, fixes, packageJson, ref, results, updatedPackageJson;
      packageJson = arg.packageJson, results = arg.results;
      ref = this.getChanges(results), changes = ref.changes, fixes = ref.fixes;
      updatedPackageJson = this.applyChanges({
        changes: changes,
        packageJson: packageJson
      });
      return {
        fixes: fixes,
        updatedPackageJson: updatedPackageJson
      };
    };

    AutoCorrector.prototype.getChanges = function(results) {
      var change, changes, fixes, i, len, module, modules, type;
      changes = [];
      fixes = {
        dependencies: [],
        devDependencies: []
      };
      for (type in results) {
        modules = results[type];
        for (i = 0, len = modules.length; i < len; i++) {
          module = modules[i];
          change = this.getChange({
            module: module,
            type: type
          });
          if (change) {
            changes.push(change);
            fixes[type].push(module.name);
          }
        }
      }
      return {
        changes: changes,
        fixes: fixes
      };
    };

    AutoCorrector.prototype.getChange = function(arg) {
      var module, type;
      module = arg.module, type = arg.type;
      if (module.errorIgnored) {
        return;
      }
      switch (module.error) {
        case ERRORS.SHOULD_BE_DEPENDENCY:
        case ERRORS.SHOULD_BE_DEV_DEPENDENCY:
          return function(packageJson) {
            var newType, version;
            newType = type === 'dependencies' ? 'devDependencies' : 'dependencies';
            version = packageJson[type][module.name];
            delete packageJson[type][module.name];
            packageJson[newType] || (packageJson[newType] = {});
            packageJson[newType][module.name] = version;
            return packageJson[newType] = sortedObject(packageJson[newType]);
          };
        case ERRORS.UNUSED:
          return function(packageJson) {
            return delete packageJson[type][module.name];
          };
      }
    };

    AutoCorrector.prototype.applyChanges = function(arg) {
      var change, changes, i, len, packageJson, updatedPackageJson;
      changes = arg.changes, packageJson = arg.packageJson;
      updatedPackageJson = _.cloneDeep(packageJson);
      for (i = 0, len = changes.length; i < len; i++) {
        change = changes[i];
        change(updatedPackageJson);
      }
      return updatedPackageJson;
    };

    return AutoCorrector;

  })();

  module.exports = AutoCorrector;

}).call(this);
