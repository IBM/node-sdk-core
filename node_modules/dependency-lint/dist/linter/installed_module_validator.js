(function() {
  var InstalledModuleValidater, Promise, _, access, coroutine, fs, fsExtra, path, readJson, semver;

  _ = require('lodash');

  fs = require('fs');

  fsExtra = require('fs-extra');

  path = require('path');

  Promise = require('bluebird');

  semver = require('semver');

  coroutine = Promise.coroutine;

  access = Promise.promisify(fs.access);

  readJson = Promise.promisify(fsExtra.readJson);

  InstalledModuleValidater = (function() {
    function InstalledModuleValidater() {}

    InstalledModuleValidater.prototype.validate = coroutine(function*(arg) {
      var dir, issues, modules, packageJson;
      dir = arg.dir, packageJson = arg.packageJson;
      modules = _.assign({}, packageJson.devDependencies, packageJson.dependencies);
      issues = [];
      yield Promise.all(_.map(modules, coroutine((function(_this) {
        return function*(version, name) {
          var status;
          if (!semver.validRange(version)) {
            return;
          }
          status = (yield _this.getModuleStatus({
            dir: dir,
            name: name,
            version: version
          }));
          if (!status) {
            return;
          }
          return issues.push({
            name: name,
            status: status
          });
        };
      })(this))));
      if (!issues.length) {
        return;
      }
      throw new Error(this.buildErrorMessage(issues));
    });

    InstalledModuleValidater.prototype.getModuleStatus = coroutine(function*(arg) {
      var dir, modulePackageJson, modulePackageJsonPath, name, version;
      dir = arg.dir, name = arg.name, version = arg.version;
      modulePackageJsonPath = path.join(dir, 'node_modules', name, 'package.json');
      try {
        yield access(modulePackageJsonPath);
      } catch (error) {
        return 'not installed';
      }
      modulePackageJson = (yield readJson(modulePackageJsonPath));
      if (semver.satisfies(modulePackageJson.version, version)) {
        return;
      }
      return "installed: " + modulePackageJson.version + ", listed: " + version;
    });

    InstalledModuleValidater.prototype.buildErrorMessage = function(issues) {
      var issueMessages;
      issueMessages = issues.map(function(arg) {
        var name, status;
        name = arg.name, status = arg.status;
        return name + " (" + status + ")";
      });
      return "The following modules listed in your `package.json` have issues:\n  " + (issueMessages.join('\n  ')) + "\nAll modules need to be installed with the correct semantic version\nto properly check for the usage of a module's executables.";
    };

    return InstalledModuleValidater;

  })();

  module.exports = InstalledModuleValidater;

}).call(this);
