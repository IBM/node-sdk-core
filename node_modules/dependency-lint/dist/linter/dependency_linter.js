(function() {
  var DependencyLinter, ERRORS, _, camelCase, minimatch, packageJson,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('lodash');

  camelCase = require('camel-case');

  ERRORS = require('../errors');

  minimatch = require('minimatch');

  packageJson = require('../../package.json');

  DependencyLinter = (function() {
    function DependencyLinter(config) {
      var key, value;
      this.config = config;
      this.isDevScript = bind(this.isDevScript, this);
      this.isDevFile = bind(this.isDevFile, this);
      this.lint = bind(this.lint, this);
      this.devFiles = _.concat(this.config.executedModules.shellScripts.dev, this.config.requiredModules.files.dev);
      this.ignoreErrors = {};
      for (key in ERRORS) {
        value = ERRORS[key];
        this.ignoreErrors[value] = this.config.ignoreErrors[camelCase(key)];
      }
    }

    DependencyLinter.prototype.lint = function(arg) {
      var i, j, key, len, len1, listedModule, listedModules, modules, name, out, ref, ref1, results, status, usedModule, usedModules;
      listedModules = arg.listedModules, usedModules = arg.usedModules;
      out = {
        dependencies: [],
        devDependencies: []
      };
      for (i = 0, len = usedModules.length; i < len; i++) {
        usedModule = usedModules[i];
        status = {
          isDependency: !this.isDevDependency(usedModule),
          listedAsDependency: (ref = usedModule.name, indexOf.call(listedModules.dependencies, ref) >= 0),
          listedAsDevDependency: (ref1 = usedModule.name, indexOf.call(listedModules.devDependencies, ref1) >= 0)
        };
        this.parseUsedModule(usedModule, status, out);
      }
      for (key in listedModules) {
        modules = listedModules[key];
        for (j = 0, len1 = modules.length; j < len1; j++) {
          name = modules[j];
          if (!(!_.some(usedModules, function(moduleData) {
            return moduleData.name === name;
          }))) {
            continue;
          }
          listedModule = {
            name: name,
            files: [],
            scripts: []
          };
          if (key !== 'devDependencies' || name !== packageJson.name) {
            listedModule.error = ERRORS.UNUSED;
          }
          out[key].push(listedModule);
        }
      }
      for (key in out) {
        results = out[key];
        results.forEach((function(_this) {
          return function(result) {
            if (result.error && _this.isErrorIgnored(result)) {
              return result.errorIgnored = true;
            }
          };
        })(this));
        out[key] = _.sortBy(results, 'name');
      }
      return out;
    };

    DependencyLinter.prototype.isErrorIgnored = function(arg) {
      var error, name;
      error = arg.error, name = arg.name;
      return _.some(this.ignoreErrors[error], function(regex) {
        return name.match(regex);
      });
    };

    DependencyLinter.prototype.isDevDependency = function(arg) {
      var files, scripts;
      files = arg.files, scripts = arg.scripts;
      return _.every(files, this.isDevFile) && _.every(scripts, this.isDevScript);
    };

    DependencyLinter.prototype.isDevFile = function(file) {
      return _.some(this.devFiles, function(pattern) {
        return minimatch(file, pattern);
      });
    };

    DependencyLinter.prototype.isDevScript = function(script) {
      return _.some(this.config.executedModules.npmScripts.dev, function(regex) {
        return script.match(regex);
      });
    };

    DependencyLinter.prototype.parseUsedModule = function(usedModule, status, result) {
      var isDependency, listedAsDependency, listedAsDevDependency;
      isDependency = status.isDependency, listedAsDependency = status.listedAsDependency, listedAsDevDependency = status.listedAsDevDependency;
      if (isDependency) {
        if (listedAsDependency) {
          result.dependencies.push(usedModule);
        }
        if (listedAsDevDependency) {
          result.devDependencies.push(_.assign({}, usedModule, {
            error: ERRORS.SHOULD_BE_DEPENDENCY
          }));
        }
        if (!(listedAsDependency || listedAsDevDependency)) {
          return result.dependencies.push(_.assign({}, usedModule, {
            error: ERRORS.MISSING
          }));
        }
      } else {
        if (listedAsDependency) {
          result.dependencies.push(_.assign({}, usedModule, {
            error: ERRORS.SHOULD_BE_DEV_DEPENDENCY
          }));
        }
        if (listedAsDevDependency) {
          result.devDependencies.push(usedModule);
        }
        if (!(listedAsDependency || listedAsDevDependency)) {
          return result.devDependencies.push(_.assign({}, usedModule, {
            error: ERRORS.MISSING
          }));
        }
      }
    };

    return DependencyLinter;

  })();

  module.exports = DependencyLinter;

}).call(this);
