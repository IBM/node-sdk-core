(function() {
  var ExecutedModuleFinder, Promise, RequiredModuleFinder, UsedModuleFinder, _, coroutine,
    slice = [].slice;

  _ = require('lodash');

  ExecutedModuleFinder = require('./executed_module_finder');

  Promise = require('bluebird');

  RequiredModuleFinder = require('./required_module_finder');

  coroutine = Promise.coroutine;

  UsedModuleFinder = (function() {
    function UsedModuleFinder(config) {
      this.executedModuleFinder = new ExecutedModuleFinder(config.executedModules);
      this.requiredModuleFinder = new RequiredModuleFinder(config.requiredModules);
    }

    UsedModuleFinder.prototype.find = coroutine(function*(arg) {
      var dir, packageJson;
      dir = arg.dir, packageJson = arg.packageJson;
      return this.normalizeModules((yield Promise.all([
        this.executedModuleFinder.find({
          dir: dir,
          packageJson: packageJson
        }), this.requiredModuleFinder.find(dir)
      ])));
    });

    UsedModuleFinder.prototype.normalizeModules = function() {
      var file, i, len, modules, name, ref, ref1, result, script;
      modules = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      result = {};
      ref = _.flattenDeep(modules);
      for (i = 0, len = ref.length; i < len; i++) {
        ref1 = ref[i], name = ref1.name, file = ref1.file, script = ref1.script;
        if (!result[name]) {
          result[name] = {
            name: name,
            files: [],
            scripts: []
          };
        }
        if (file) {
          result[name].files.push(file);
        }
        if (script) {
          result[name].scripts.push(script);
        }
      }
      return _.values(result);
    };

    return UsedModuleFinder;

  })();

  module.exports = UsedModuleFinder;

}).call(this);
